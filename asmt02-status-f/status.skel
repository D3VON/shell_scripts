#!/bin/bash
#
# status - put your global documentation here
#
#

# the functions come first

fatal() {
    #
    # fatal - output a fatal error message to stderr and exit
    #     uses the function error() to output the error message.
    #
    error $*
    exit 1
}

error() {
    #
    # output an error message to stderr.
    # keeps track of whether errors have been seen or not!
    # SETS A GLOBAL VARIABLE errors_seen TO INDICATE AN ERROR HAS BEEN SEEN!
    #
    typeset progname=$(basename $0)
    errors_seen=true
    echo -e "$progname: error: $*" >&2
}

default_list() {
    # default_list outputs the default list of things to work on
    #   (via standard output)
    # it takes two arguments: the system ($1) and the type of things
    #   status is requested on ($2). 
    # for assignment two, the only possibility for $2 is "file"
    #   and $1 (system) doesn't matter
    typeset mode=$2 system=$1
    if [ "$mode" != "file" ]; then
	fatal "inconsistent mode in default_list ($mode)"
    fi
    # whatever goes to standard output is command-substituted 
    # into the list
    ls -1
}


dofile() {
    # Here's where the work is done in assignment two.
    # Generate status information for a single file on
    #    the indicated system
    # There are two arguments: $1 is the system; $2 is the file path
    # I'm putting them in local variables for you
    typeset file=$2 system=$1
    #
    # Be sure and typeset your variables so that they are not global!
    echo "Code to process file '$file' on system '$system' should execute now"
}

#---------------------------------------------
# the main program

# initialize our flag to indicate there have not been any errors
errors_seen=false

# check the system we are on. 
# use the uname command. If it contains 'linux', set the 
# variable 'system' to indicate linux. If it indicates
# HP-UX (you'll have to test this), set it appropriately.
# What do you do if you are on another system? 
echo "Code to set the system type should execute now. System set to 'linux'"
system=linux

# process the arguments
# if there's not at least one argument, it's a fatal error.
echo "Code to check that there is at least one argument should execute now."
echo "Assuming 'yes'"

# the first argument MUST be a valid option. (In the case of
# asmt 2 it must be -f. Later it can be other things.)
echo "Code to check the option should execute now. Assuming -f"



# if there was only one argument, you must generate the list
# of things to work on. if there are more arguments, the list 
# consists of the rest of the arguments! 
if [ $# -gt 2 ]; then
    # get rid of the first argument.
    # set the variable list to the remaining arguments
    error "No code yet to handle specific files on the command line"

else
    # the function default_list outputs (to standard output)
    # a list of the default things to work on.
    list=$(default_list $system "file")
fi

# The rest of the main program is simple:
# You have a function to do one file.
# Simply call it for each item in your list!
for item in $list; do
    dofile "$system" "$item"
done

# now simply exit with the exit status set depending on 
# whether errors were encountered or not
echo "Code to set the final exit status should execute now"

